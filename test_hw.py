'''





Do NOT edit this file unless told to do so by your instructor.









'''
#TODO Find a more scalable approach

import random

import string
import statistics
import sys
import pathlib

import test_utils
sys.meta_path.append(test_utils.NotebookFinder())
loaded = test_utils.NotebookLoader("./unit_3_linear_regression_hw.ipynb")
loaded.load_module("unit_3_linear_regression_hw")


import unit_3_linear_regression_hw
import numpy as np
import pandas as pd
import warnings

# These are the tests that are visible to you, this will help you debug your own problems

def test_extract_customer_data():
    annual_income_head = np.array([ [45000],
                                    [55000],
                                    [65000],
                                    [30000],
                                    [47000],
                                    [61000],
                                    [54000],
                                    [43000],
                                    [70000],
                                    [50000],
                                    [46000]])
    
    assert np.array_equal(annual_income_head, unit_3_linear_regression_hw.extract_customer_data().loc[0:10, ["annual_income"]].values), "Data was not extracted correctly"


def test_train_linear_regression_model():
    # Made up data
    x_data1 = [0, 2, 3, 4, 5, 6]
    y_data1 = [0, 1, 2, 3, 4, 5]
    x_data1 = pd.DataFrame(x_data1)
    y_data1 = pd.DataFrame(y_data1)
    model = unit_3_linear_regression_hw.train_linear_regression_model(x_data1, y_data1)

    assert type(model) != None, "Model was returned as None, did you fill out this function?"
    assert round(model.score(x_data1, y_data1), 3) == 0.980, "Model score did not match - are you fitting the data?"

    x_data2 = pd.DataFrame([9, 12, 13, 14, 19, 60])
    y_data2 = pd.DataFrame([1, 2, 3, 4, 5, 6])
    model2 = unit_3_linear_regression_hw.train_linear_regression_model(x_data2, y_data2)

    assert type(model2) != None, "Model was returned as None, did you fill out this function?"
    assert round(model2.score(x_data2, y_data2), 3) == 0.588


def test_get_model_metrics():
    warnings.filterwarnings("ignore", category=DeprecationWarning) 
    x_data1 = [1, 2, 2.2, 4, 5, 6]
    y_data1 = [0, 1, 2, 3, 4, 5]
    x_data1 = pd.DataFrame(x_data1)
    y_data1 = pd.DataFrame(y_data1)


    try:
        model = unit_3_linear_regression_hw.train_linear_regression_model(x_data1, y_data1)
        assert model != None
    except:
        assert False, "train_linear_regression model must be correct to get this test correct"
    
    metrics = unit_3_linear_regression_hw.print_model_metrics(model, x_data1, y_data1)

    assert np.round(metrics["Coefficients"], 3)  == 0.950
    assert np.round(metrics["Intercepts"], 3) == -0.700
    assert np.round(metrics["Score"], 3) == 0.972
    # coe = [[0.01208716]]
    # int = [-268.26390507]
    # score = 0.9686662678992661
